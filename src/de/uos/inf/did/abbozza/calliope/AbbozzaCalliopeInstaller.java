/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.uos.inf.did.abbozza.calliope;

import de.uos.inf.did.abbozza.AbbozzaLocale;
import de.uos.inf.did.abbozza.AbbozzaServer;
import de.uos.inf.did.abbozza.install.InstallTool;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.Properties;
import java.util.jar.JarFile;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;

/**
 *
 * @author michael
 */
public class AbbozzaCalliopeInstaller extends javax.swing.JFrame {

    // private String toolsDir;
    private String abbozzaDir;
    public Properties prefs;
    private File installDir;
    private InstallTool installTool;
    private boolean isAdmin;
    private JarFile installerJar;

    /**
     * Creates new form AbbozzaInstaller
     */
    public AbbozzaCalliopeInstaller() {
        // Get the correct install tool
        installTool = InstallTool.getInstallTool();
        isAdmin = installTool.isAdministrator();

        File installerFile = installTool.getInstallerJar();
        if (installerFile == null) {
            System.exit(1);
        }
        try {
            installerJar = new JarFile(installerFile);
            AbbozzaLocale.setLocale(System.getProperty("user.language"), installerJar, "languages/");
        } catch (IOException ex) {
            ex.printStackTrace(System.out);
            System.exit(1);
        }

        initComponents();

        String osname = System.getProperty("os.name").toLowerCase();
        if (osname.contains("mac")) {
            // OsX only requires the command 'open'
            browserField.setText("open");
            browserField.setEnabled(false);
            browserButton.setEnabled(false);
        }

        this.setTitle(AbbozzaLocale.entry("GUI.TITLE"));

        setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (screen.width - getWidth()) / 2;
        int y = (screen.height - getHeight()) / 2;
        setLocation(x, y);

        abbozzaDir = System.getProperty("user.home") + "/.abbozza/calliope";
        File aD = new File(abbozzaDir);

        if (aD.exists()) {
            int result = JOptionPane.showConfirmDialog(this,
                    AbbozzaLocale.entry("MSG.ALREADY_INSTALLED") + "\n"
                    + AbbozzaLocale.entry("MSG.CONTINUE_INSTALLATION") + "\n" + "( Version " + AbbozzaServer.VERSION + ")",
                    AbbozzaLocale.entry("GUI.TITLE"), JOptionPane.YES_NO_OPTION);
            if (result == JOptionPane.NO_OPTION) {
                System.exit(1);
            }
            File prefFile = new File(abbozzaDir + "/abbozza.cfg");
            Properties config = new Properties();
            try {
                config.load(new FileInputStream(prefFile));
                browserField.setText(config.getProperty("browserPath"));
            } catch (Exception e) {
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        logoPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        msgPanel = new javax.swing.JTextPane();
        installField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        sketchbookButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        browserField = new javax.swing.JTextField();
        browserButton = new javax.swing.JButton();
        buttonPanel = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        installButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        logoPanel.setLayout(new java.awt.BorderLayout());

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/uos/inf/did/abbozza/img/abbozza200.png"))); // NOI18N
        jLabel1.setToolTipText("abbozza! logo");
        logoPanel.add(jLabel1, java.awt.BorderLayout.LINE_START);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/uos/inf/did/abbozza/img/calliope_logo_small.png"))); // NOI18N
        logoPanel.add(jLabel5, java.awt.BorderLayout.EAST);

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText(AbbozzaServer.VERSION);
        jLabel4.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jLabel4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        logoPanel.add(jLabel4, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(logoPanel, java.awt.BorderLayout.PAGE_START);
        logoPanel.getAccessibleContext().setAccessibleName("logoPanel");
        logoPanel.getAccessibleContext().setAccessibleDescription("");

        mainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 15, 5));
        java.awt.GridBagLayout mainPanelLayout = new java.awt.GridBagLayout();
        mainPanelLayout.columnWidths = new int[] {430, 50};
        mainPanelLayout.rowHeights = new int[] {180, 15, 30, 30, 30, 30};
        mainPanel.setLayout(mainPanelLayout);

        msgPanel.setEditable(false);
        msgPanel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        msgPanel.setText(AbbozzaLocale.entry("GUI.MESSAGE")
        );
        msgPanel.setFocusable(false);
        jScrollPane1.setViewportView(msgPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        mainPanel.add(jScrollPane1, gridBagConstraints);

        installField.setText(System.getProperty("user.home")+"/abbozza");
        installField.setToolTipText("Das Sketchbook-Verzeichnis");
        installField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                installFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        mainPanel.add(installField, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel2.setText(AbbozzaLocale.entry("GUI.INSTALL_DIR"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        mainPanel.add(jLabel2, gridBagConstraints);
        jLabel2.getAccessibleContext().setAccessibleName("Das Zielverzeichnis f√ºr die Installation:");

        sketchbookButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/uos/inf/did/abbozza/img/directory24.png"))); // NOI18N
        sketchbookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                installDirButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        mainPanel.add(sketchbookButton, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel3.setText(AbbozzaLocale.entry("GUI.BROWSER")
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        mainPanel.add(jLabel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        mainPanel.add(browserField, gridBagConstraints);

        browserButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/uos/inf/did/abbozza/img/directory24.png"))); // NOI18N
        browserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browserButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        mainPanel.add(browserButton, gridBagConstraints);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        cancelButton.setText(AbbozzaLocale.entry("GUI.CANCEL"));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(cancelButton);

        installButton.setText(AbbozzaLocale.entry("GUI.INSTALL"));
        installButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                installButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(installButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void installButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_installButtonActionPerformed
        Document msgDoc = msgPanel.getDocument();

        addMsg(msgDoc, "\n\n\n" + AbbozzaLocale.entry("MSG.STARTING_INSTALLATION"));
                
        installDir = new File(installField.getText());
        File browserFile = new File(browserField.getText());
        boolean yottaInstalled = true;
        
        /**
         * 1st step: Check if yotta is installed
         */
        addMsg(msgDoc, AbbozzaLocale.entry("MSG.CHECKING_PREREQUISITES"));
        if (!checkPrerequisites()) {
            yottaInstalled = false;
        }

        /**
         * 2nd step: Detect the jar from which installation is done
         */
        if (installerJar == null) {
            System.exit(1);
        }

        /**
         * 3rd step: Create abbozza dir
         */
        abbozzaDir = installDir.getAbsolutePath();
        addMsg(msgDoc, AbbozzaLocale.entry("MSG.CREATING_DIR",abbozzaDir));
        File abzDir = new File(abbozzaDir);
        abzDir.mkdirs();

        if (!abzDir.canWrite()) {
            JOptionPane.showMessageDialog(this,
                    AbbozzaLocale.entry("ERR.CANNOT_WRITE", abzDir.getAbsolutePath()),
                    AbbozzaLocale.entry("ERR.TITLE"), JOptionPane.ERROR_MESSAGE);
            return;
        }

        /**
         * 4th step: Install subdirs lib and build
         */
        File libDir = new File(abbozzaDir + "/lib/");
        addMsg(msgDoc, AbbozzaLocale.entry("MSG.CREATING_DIR",libDir.getAbsolutePath()));
        libDir.mkdirs();
        if (!libDir.canWrite()) {
            JOptionPane.showMessageDialog(this,
                    AbbozzaLocale.entry("ERR.CANNOT_WRITE", libDir.getAbsolutePath()),
                    AbbozzaLocale.entry("ERR.TITLE"), JOptionPane.ERROR_MESSAGE);
            return;
        }

        File buildDir = new File(abbozzaDir + "/build/");
        addMsg(msgDoc, AbbozzaLocale.entry("MSG.CREATING_DIR",buildDir.getAbsolutePath()));
        buildDir.mkdirs();
        if (!buildDir.canWrite()) {
            JOptionPane.showMessageDialog(this,
                    AbbozzaLocale.entry("ERR.CANNOT_WRITE", buildDir.getAbsolutePath()),
                    AbbozzaLocale.entry("ERR.TITLE"), JOptionPane.ERROR_MESSAGE);
            return;
        }

        File sketchDir = new File(abbozzaDir + "/sketches/");
        addMsg(msgDoc, AbbozzaLocale.entry("MSG.CREATING_DIR",sketchDir.getAbsolutePath()));
        sketchDir.mkdirs();
        if (!sketchDir.canWrite()) {
            JOptionPane.showMessageDialog(this,
                    AbbozzaLocale.entry("ERR.CANNOT_WRITE", sketchDir.getAbsolutePath()),
                    AbbozzaLocale.entry("ERR.TITLE"), JOptionPane.ERROR_MESSAGE);
            return;
        }

        File binDir = new File(abbozzaDir + "/bin/");
        addMsg(msgDoc, AbbozzaLocale.entry("MSG.CREATING_DIR",binDir.getAbsolutePath()));
        binDir.mkdirs();
        if (!binDir.canWrite()) {
            JOptionPane.showMessageDialog(this,
                    AbbozzaLocale.entry("ERR.CANNOT_WRITE", binDir.getAbsolutePath()),
                    AbbozzaLocale.entry("ERR.TITLE"), JOptionPane.ERROR_MESSAGE);
            return;
        }

        /**
         * 5th step: Backup previous version
         */
        File targetFile = new File(libDir.getAbsolutePath() + "/abbozza-calliope.jar");
        File backup = new File(libDir.getAbsolutePath() + "/abbozza-calliope_" + System.currentTimeMillis() + ".jar_");
        if (targetFile.exists()) {
            addMsg(msgDoc, AbbozzaLocale.entry("MSG.BACKUP",backup.getAbsolutePath()));
            try {
                Files.move(targetFile.toPath(), backup.toPath(), StandardCopyOption.REPLACE_EXISTING);
            } catch (IOException ex) {
                int opt = JOptionPane.showConfirmDialog(this,
                        AbbozzaLocale.entry("ERR.CANNOT_BACKUP") + "\n"
                        + AbbozzaLocale.entry("MSG.CONTINUE_INSTALLATION"),
                        AbbozzaLocale.entry("ERR.TITLE"), JOptionPane.YES_NO_OPTION);
                if (opt == JOptionPane.NO_OPTION) {
                    this.setVisible(false);
                    System.exit(1);
                }
            }
        }

        /**
         * 6th step: Copy installer jar to abbozza dir
         */
        try {
            targetFile.createNewFile();
            addMsg(msgDoc, AbbozzaLocale.entry("MSG.WRITING",abbozzaDir + "/lib/abbozza-calliope.jar"));
            installTool.copyFromJar(installerJar, "lib/abbozza-calliope.jar", abbozzaDir + "/lib/abbozza-calliope.jar");
            // Files.copy(installerFile.toPath(), targetFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this,
                    AbbozzaLocale.entry("ERR.CANNOT_WRITE", targetFile.getAbsolutePath()),
                    AbbozzaLocale.entry("ERR.TITLE"), JOptionPane.ERROR_MESSAGE);
            return;
        }

        /**
         * 7th step: copy jars and script from installerJar to their locations
         */
        addMsg(msgDoc, AbbozzaLocale.entry("MSG.WRITING",abbozzaDir + "/lib/jssc-2.8.0.jar"));
        installTool.copyFromJar(installerJar, "lib/jssc-2.8.0.jar", abbozzaDir + "/lib/jssc-2.8.0.jar");
        addMsg(msgDoc, AbbozzaLocale.entry("MSG.WRITING",abbozzaDir + "/lib/srecord/"));
        installTool.copyDirFromJar(installerJar, "lib/srecord/", abbozzaDir + "/lib/srecord/");
        addMsg(msgDoc, AbbozzaLocale.entry("MSG.WRITING",abbozzaDir + "/build/"));
        installTool.copyDirFromJar(installerJar, "build/", abbozzaDir + "/build/");
        addMsg(msgDoc, AbbozzaLocale.entry("MSG.WRITING",abbozzaDir + "/bin/abbozzaC.[sh|bat]"));
        installTool.copyFromJar(installerJar, "scripts/abbozzaC.sh", abbozzaDir + "/bin/abbozzaC.sh");
        installTool.copyFromJar(installerJar, "scripts/abbozzaC.bat", abbozzaDir + "/bin/abbozzaC.bat");
        addMsg(msgDoc, AbbozzaLocale.entry("MSG.WRITING",abbozzaDir + "/bin/abbozzaMicroPython.[sh|bat]"));
        installTool.copyFromJar(installerJar, "scripts/abbozzaMicroPython.sh", abbozzaDir + "/bin/abbozzaMicroPython.sh");
        installTool.copyFromJar(installerJar, "scripts/abbozzaMicroPython.bat", abbozzaDir + "/bin/abbozzaMicroPython.bat");
        addMsg(msgDoc, AbbozzaLocale.entry("MSG.WRITING",abbozzaDir + "/abbozza_icon.png"));
        installTool.copyFromJar(installerJar, "lib/abbozza_icon.png", abbozzaDir + "/lib/abbozza_icon.png");
 
        /**
         * 8th step: Add application to menus
         */
        addMsg(msgDoc, AbbozzaLocale.entry("MSG.ADDING_MENU"));
        String suffix = "sh";
        if (installTool.getSystem().equals("Win")) {
            suffix = "bat";
        }
        installTool.addAppToMenu("abbozzaCalliopeC", "abbozza! Calliope C",
            "abbozza! Calliope C",
            abbozzaDir + "/bin/abbozzaC."+suffix, abbozzaDir + "/lib/abbozza_icon.png", false);
        installTool.addAppToMenu("abbozzaCalliopeMicroPython", "abbozza! Calliope MicroPython",
            "abbozza! Calliope MicroPython",
            abbozzaDir + "/bin/abbozzaMicroPython."+suffix, abbozzaDir + "/lib/abbozza_icon.png", false);

        /**
         * Write configuration file
         */        
        Properties config = new Properties();
        config.setProperty("freshInstall", "true");
        config.setProperty("browserPath", browserField.getText() );
        config.setProperty("installPath", this.installField.getText() );
        
        File prefFile = new File(System.getProperty("user.home") + "/.abbozza/calliope/abbozza.cfg");
        try {            
            prefFile.getParentFile().mkdirs();
            prefFile.createNewFile();

            config.store(new FileOutputStream(prefFile), "abbozza! preferences");
            addMsg(msgDoc,AbbozzaLocale.entry("MSG.WRITING_CONFIGURATION",prefFile.getAbsolutePath()));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, AbbozzaLocale.entry("MSG.WRITING_CONFIGURATION",prefFile.getAbsolutePath()),
                    AbbozzaLocale.entry("ERR.TITLE"), JOptionPane.ERROR_MESSAGE);
            this.setVisible(false);
            System.exit(1);
        }

        prefFile = new File(System.getProperty("user.home") + "/.abbozza/calliopeC/abbozza.cfg");
        try {            
            prefFile.getParentFile().mkdirs();
            prefFile.createNewFile();

            config.store(new FileOutputStream(prefFile), "abbozza! preferences");
            addMsg(msgDoc,AbbozzaLocale.entry("MSG.WRITING_CONFIGURATION",prefFile.getAbsolutePath()));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, AbbozzaLocale.entry("MSG.WRITING_CONFIGURATION",prefFile.getAbsolutePath()),
                    AbbozzaLocale.entry("ERR.TITLE"), JOptionPane.ERROR_MESSAGE);
            this.setVisible(false);
            System.exit(1);
        }

        /**
         * 9th step:
         * first compile for microbit and calliope
         */
        if ( yottaInstalled ) {
            int opt = JOptionPane.showConfirmDialog(this, "Precompile for Calliope MINI?\n(Requires internet connection)", "Precompilation", JOptionPane.YES_NO_OPTION);
            if ( opt == JOptionPane.YES_OPTION) {
                addMsg(msgDoc, AbbozzaLocale.entry("MSG.COMPILE_CALLIOPE"));                    
                if ( build(abbozzaDir + "/build/calliope/" ) != 0 ) {
                    addMsg(msgDoc, AbbozzaLocale.entry("MSG.COMPILE_FAILED"));                    
                } else {
                    addMsg(msgDoc, AbbozzaLocale.entry("MSG.COMPILE_SUCCESS"));                                            
                }
            }
            
            opt = JOptionPane.showConfirmDialog(this, "Precompile for micro:bit?\n(Requires internet connection)", "Precompilation", JOptionPane.YES_NO_OPTION);
            if ( opt == JOptionPane.YES_OPTION) {
                addMsg(msgDoc, AbbozzaLocale.entry("MSG.COMPILE_MICROBIT"));                    
                if ( build(abbozzaDir + "/build/microbit/" ) != 0 ) {
                    addMsg(msgDoc, AbbozzaLocale.entry("MSG.COMPILE_FAILED"));                    
                } else {
                    addMsg(msgDoc, AbbozzaLocale.entry("MSG.COMPILE_SUCCESS"));                                            
                }
            }
        }
        
        JOptionPane.showMessageDialog(this, AbbozzaLocale.entry("MSG.SUCCESS"),
                AbbozzaLocale.entry("GUI.TITLE"), JOptionPane.INFORMATION_MESSAGE);
        
        this.setVisible(false);
        System.exit(0);
        return;
    }//GEN-LAST:event_installButtonActionPerformed


    private void installDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_installDirButtonActionPerformed
        JFileChooser chooser = new JFileChooser(installField.getText());
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            installField.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_installDirButtonActionPerformed

    private void browserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browserButtonActionPerformed
        JFileChooser chooser = new JFileChooser(browserField.getText());
        int returnVal = chooser.showOpenDialog(this);
        chooser.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f) {
                return f.canExecute();
            }

            @Override
            public String getDescription() {
                return AbbozzaLocale.entry("GUI.SELECT_EXECUTABLES");
            }
        });
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            if (chooser.getSelectedFile() != null) {
                browserField.setText(chooser.getSelectedFile().getAbsolutePath());
            }
        }
    }//GEN-LAST:event_browserButtonActionPerformed

    private void installFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_installFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_installFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AbbozzaCalliopeInstaller.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AbbozzaCalliopeInstaller.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AbbozzaCalliopeInstaller.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AbbozzaCalliopeInstaller.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AbbozzaCalliopeInstaller().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browserButton;
    private javax.swing.JTextField browserField;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton installButton;
    private javax.swing.JTextField installField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel logoPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextPane msgPanel;
    private javax.swing.JButton sketchbookButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Check if yotta is installed
     */
    private boolean checkPrerequisites() {
        if (installTool.getSystem().equals("Win")) {
            return checkPrerequisitesWin();
        }
        return checkPrerequisitesLinux();
    }
    
    
    private boolean checkPrerequisitesLinux() {
        try {
            ProcessBuilder procBuilder  = new ProcessBuilder("yt","--version");
            Process proc = procBuilder.start();            
            proc.waitFor();
        } catch (IOException ex) {
            int opt = JOptionPane.showConfirmDialog(this,
                    AbbozzaLocale.entry("ERR.YOTTA_MISSING") + "\n"
                    + AbbozzaLocale.entry("MSG.CONTINUE_INSTALLATION"),
                    AbbozzaLocale.entry("ERR.TITLE"), JOptionPane.YES_NO_OPTION);
            if (opt == JOptionPane.YES_OPTION) {
                return false;
            }
        } catch (InterruptedException ex) {
        }
        return true;
    }

    private boolean checkPrerequisitesWin() {
        String yottaPath = System.getenv("YOTTA_PATH");
        String yottaInstall = System.getenv("YOTTA_INSTALL_LOCATION");
        try {
            ProcessBuilder procBuilder  = new ProcessBuilder(yottaInstall+"\\workspace\\Scripts\\yt","--version");
            procBuilder.environment().put("PATH",yottaPath + ";" + System.getenv("PATH"));
            procBuilder.inheritIO();
            Process proc = procBuilder.start();            
            proc.waitFor();
        } catch (IOException ex) {
            ex.printStackTrace(System.out);
            int opt = JOptionPane.showConfirmDialog(this,
                    AbbozzaLocale.entry("ERR.YOTTA_MISSING") + "\n"
                    + AbbozzaLocale.entry("MSG.CONTINUE_INSTALLATION"),
                    AbbozzaLocale.entry("ERR.TITLE"), JOptionPane.YES_NO_OPTION);
            if (opt == JOptionPane.YES_OPTION) {
                return false;
            }
        } catch (InterruptedException ex) {
        }
        return true;
    }
    
    
    private int build(String buildPath) {
        if (installTool.getSystem().equals("Win")) {
            return buildWin(buildPath);
        }
        return buildLinux(buildPath);        
    }
    
    private int buildLinux(String buildPath) {
        try {
            ProcessBuilder procBuilder = new ProcessBuilder("yt","-n","build");
            procBuilder.directory(new File(buildPath));
            procBuilder.inheritIO();
            Process proc = procBuilder.start();
            proc.waitFor();
            return proc.exitValue();
        } catch (IOException ex) {
            return 2;
        } catch (InterruptedException ex) {
            return 3;
        }
    }
    
    private int buildWin(String buildPath) {
        String yottaPath = System.getenv("YOTTA_PATH");
        String yottaInstall = System.getenv("YOTTA_INSTALL_LOCATION");
        try {
            ProcessBuilder procBuilder  = new ProcessBuilder(yottaInstall+"\\workspace\\Scripts\\yt","-n","build");
            procBuilder.directory(new File(buildPath));
            procBuilder.environment().put("PATH", installDir.getAbsolutePath() + "\\lib\\srecord\\" + ";" + yottaPath + ";" + System.getenv("PATH"));
            procBuilder.inheritIO();
            Process proc = procBuilder.start();            
            proc.waitFor();
            return proc.exitValue();
        } catch (IOException ex) {
            ex.printStackTrace(System.out);
            int opt = JOptionPane.showConfirmDialog(this,
                    AbbozzaLocale.entry("ERR.YOTTA_MISSING") + "\n"
                    + AbbozzaLocale.entry("MSG.CONTINUE_INSTALLATION"),
                    AbbozzaLocale.entry("ERR.TITLE"), JOptionPane.YES_NO_OPTION);
            if (opt == JOptionPane.YES_OPTION) {
                return 2;
            }
        } catch (InterruptedException ex) {
            return 3;
        }
        return 4;
    }
    
    private void addMsg(Document msgDoc, String text) {
        try {
            msgDoc.insertString(msgDoc.getLength(), text + "\n", null);
        } catch (BadLocationException ex) {
        }
    }
}
